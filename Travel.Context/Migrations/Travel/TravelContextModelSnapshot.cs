// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Travel.Context.Models.Travel;

namespace Travel.Context.Migrations.Travel
{
    [DbContext(typeof(TravelContext))]
    partial class TravelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Travel.Context.Models.Banner", b =>
                {
                    b.Property<Guid>("IdBanner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameBanner")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("IdBanner");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Travel.Context.Models.Car", b =>
                {
                    b.Property<Guid>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountSeat")
                        .HasColumnType("int");

                    b.Property<string>("LiscensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("NameDriver")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("IdCar");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("Travel.Context.Models.Contract", b =>
                {
                    b.Property<Guid>("IdContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreateDate")
                        .HasColumnType("bigint");

                    b.Property<long>("ExpDate")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<string>("NameContract")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SignDate")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TypeService")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdContract");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Travel.Context.Models.CostTour", b =>
                {
                    b.Property<Guid>("IdCostTour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Breakfast")
                        .HasColumnType("real");

                    b.Property<int>("CusExpected")
                        .HasColumnType("int");

                    b.Property<float>("Depreciation")
                        .HasColumnType("real");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<float>("FeeGas")
                        .HasColumnType("real");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("InsuranceFee")
                        .HasColumnType("real");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<float>("OtherPrice")
                        .HasColumnType("real");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PriceHotel")
                        .HasColumnType("real");

                    b.Property<float>("PriceRestaurant")
                        .HasColumnType("real");

                    b.Property<float>("PriceTicketPlace")
                        .HasColumnType("real");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("SellCost")
                        .HasColumnType("real");

                    b.Property<float>("Tolls")
                        .HasColumnType("real");

                    b.Property<float>("TotalCostTour")
                        .HasColumnType("real");

                    b.Property<string>("TourDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Water")
                        .HasColumnType("real");

                    b.HasKey("IdCostTour");

                    b.HasIndex("HotelId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TourDetailId")
                        .IsUnique()
                        .HasFilter("[TourDetailId] IS NOT NULL");

                    b.ToTable("CostTours");
                });

            modelBuilder.Entity("Travel.Context.Models.Customer", b =>
                {
                    b.Property<Guid>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Birthday")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateDate")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FbToken")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)");

                    b.Property<string>("GoogleToken")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("IdCustomer");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Travel.Context.Models.District", b =>
                {
                    b.Property<Guid>("IdDistrict")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameDistrict")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdDistrict");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Travel.Context.Models.Employee", b =>
                {
                    b.Property<Guid>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessToken")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)");

                    b.Property<long>("Birthday")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateDate")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("0");

                    b.Property<string>("IdSchedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<string>("NameEmployee")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("IdEmployee");

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            IdEmployee = new Guid("a86546c5-8832-4c33-99b9-7552bfdd0699"),
                            Birthday = 202204101007L,
                            CreateDate = 202204101007L,
                            Email = "test1@gmail.com",
                            Image = "",
                            IsActive = true,
                            IsDelete = false,
                            ModifyBy = "Admin Test",
                            ModifyDate = 202204101007L,
                            NameEmployee = "Admin Test",
                            Password = "3244185981728979115075721453575112",
                            Phone = "0789786646",
                            RoleId = -1
                        },
                        new
                        {
                            IdEmployee = new Guid("9558c63b-852c-4880-a212-afaed190834e"),
                            Birthday = 202204101007L,
                            CreateDate = 202204101007L,
                            Email = "test2@gmail.com",
                            Image = "",
                            IsActive = true,
                            IsDelete = false,
                            ModifyBy = "Admin Test",
                            ModifyDate = 202204101007L,
                            NameEmployee = "Local Manager Test",
                            Password = "3244185981728979115075721453575112",
                            Phone = "0789786645",
                            RoleId = 1
                        },
                        new
                        {
                            IdEmployee = new Guid("4b57b373-ef99-46b2-9ae0-15429e499cd2"),
                            Birthday = 202204101007L,
                            CreateDate = 202204101007L,
                            Email = "test3@gmail.com",
                            Image = "",
                            IsActive = true,
                            IsDelete = false,
                            ModifyBy = "Admin Test",
                            ModifyDate = 202204101007L,
                            NameEmployee = "Service Manager Test",
                            Password = "3244185981728979115075721453575112",
                            Phone = "0789786644",
                            RoleId = 2
                        },
                        new
                        {
                            IdEmployee = new Guid("1c7f9025-702f-4573-8b9a-09b91acb16bb"),
                            Birthday = 202204101007L,
                            CreateDate = 202204101007L,
                            Email = "test4@gmail.com",
                            Image = "",
                            IsActive = true,
                            IsDelete = false,
                            ModifyBy = "Admin Test",
                            ModifyDate = 202204101007L,
                            NameEmployee = "Tour Manager Test",
                            Password = "3244185981728979115075721453575112",
                            Phone = "0789786643",
                            RoleId = 3
                        },
                        new
                        {
                            IdEmployee = new Guid("03e7cb2f-614f-45c2-845a-f5b8d3a9e278"),
                            Birthday = 202204101007L,
                            CreateDate = 202204101007L,
                            Email = "test5@gmail.com",
                            Image = "",
                            IsActive = true,
                            IsDelete = false,
                            ModifyBy = "Admin Test",
                            ModifyDate = 202204101007L,
                            NameEmployee = "Tour Booking Manager Test",
                            Password = "3244185981728979115075721453575112",
                            Phone = "0789786642",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("Travel.Context.Models.File", b =>
                {
                    b.Property<Guid>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("NameFile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdFile");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Travel.Context.Models.Hotel", b =>
                {
                    b.Property<Guid>("IdHotel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DoubleRoomPrice")
                        .HasColumnType("real");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<string>("NameHotel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("QuantityDBR")
                        .HasColumnType("int");

                    b.Property<int>("QuantitySR")
                        .HasColumnType("int");

                    b.Property<float>("SingleRoomPrice")
                        .HasColumnType("real");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("IdHotel");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Travel.Context.Models.Image", b =>
                {
                    b.Property<Guid>("IdImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("IdService")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameImage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("IdImage");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Travel.Context.Models.Payment", b =>
                {
                    b.Property<string>("IdPayment")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NamePayment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TourBookingId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdPayment");

                    b.HasIndex("TourBookingId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Travel.Context.Models.Place", b =>
                {
                    b.Property<Guid>("IdPlace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<string>("NamePlace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<float>("PriceTicket")
                        .HasColumnType("real");

                    b.HasKey("IdPlace");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Travel.Context.Models.Promotion", b =>
                {
                    b.Property<Guid>("IdPromotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("FromDate")
                        .HasColumnType("bigint");

                    b.Property<string>("IdSchedule")
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ToDate")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("IdPromotion");

                    b.HasIndex("IdSchedule");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Travel.Context.Models.Province", b =>
                {
                    b.Property<Guid>("IdProvince")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameProvince")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdProvince");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Travel.Context.Models.Restaurant", b =>
                {
                    b.Property<Guid>("IdRestaurant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<string>("NameRestaurant")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("IdRestaurant");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Travel.Context.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("NameRole")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            IdRole = -1,
                            Description = "Trùm",
                            IsDelete = false,
                            NameRole = "Admin"
                        },
                        new
                        {
                            IdRole = 1,
                            Description = "Quản lý cục bộ",
                            IsDelete = false,
                            NameRole = "LocalManager"
                        },
                        new
                        {
                            IdRole = 2,
                            Description = "Quản lý dịch vụ",
                            IsDelete = false,
                            NameRole = "ServiceManager"
                        },
                        new
                        {
                            IdRole = 3,
                            Description = "Quản lý tour",
                            IsDelete = false,
                            NameRole = "TourManager"
                        },
                        new
                        {
                            IdRole = 4,
                            Description = "Quản lý tour booking",
                            IsDelete = false,
                            NameRole = "TourBookingManager"
                        });
                });

            modelBuilder.Entity("Travel.Context.Models.Schedule", b =>
                {
                    b.Property<string>("IdSchedule")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("BeginDate")
                        .HasColumnType("bigint");

                    b.Property<long>("DepartureDate")
                        .HasColumnType("bigint");

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint");

                    b.Property<float>("FinalPrice")
                        .HasColumnType("real");

                    b.Property<Guid>("IdCar")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdPromotion")
                        .HasColumnType("int");

                    b.Property<string>("IdTour")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("MinCapacity")
                        .HasColumnType("real");

                    b.Property<float>("QuantityAdult")
                        .HasColumnType("real");

                    b.Property<float>("QuantityBaby")
                        .HasColumnType("real");

                    b.Property<float>("QuantityChild")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TimePromotion")
                        .HasColumnType("bigint");

                    b.HasKey("IdSchedule");

                    b.HasIndex("IdCar");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdTour");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Travel.Context.Models.Timeline", b =>
                {
                    b.Property<string>("IdTimeline")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("FromTime")
                        .HasColumnType("bigint");

                    b.Property<string>("IdSchedule")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<long>("ToTime")
                        .HasColumnType("bigint");

                    b.HasKey("IdTimeline");

                    b.HasIndex("IdSchedule");

                    b.ToTable("Timelines");
                });

            modelBuilder.Entity("Travel.Context.Models.Tour", b =>
                {
                    b.Property<string>("IdTour")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApproveStatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("CreateDate")
                        .HasColumnType("bigint");

                    b.Property<string>("FromPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<string>("NameTour")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Thumbsnail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ToPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdTour");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("Travel.Context.Models.TourDetail", b =>
                {
                    b.Property<string>("IdTourDetail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CostTourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<float>("DisplayPrice")
                        .HasColumnType("real");

                    b.Property<float>("DisplayPromotionPrice")
                        .HasColumnType("real");

                    b.Property<float>("FinalPrice")
                        .HasColumnType("real");

                    b.Property<bool>("IsPromotion")
                        .HasColumnType("bit");

                    b.Property<float>("PriceAdult")
                        .HasColumnType("real");

                    b.Property<float>("PriceAdultPromotion")
                        .HasColumnType("real");

                    b.Property<float>("PriceBaby")
                        .HasColumnType("real");

                    b.Property<float>("PriceBabyPromotion")
                        .HasColumnType("real");

                    b.Property<float>("PriceChild")
                        .HasColumnType("real");

                    b.Property<float>("PriceChildPromotion")
                        .HasColumnType("real");

                    b.Property<int>("Profit")
                        .HasColumnType("int");

                    b.Property<int>("QuantityBooked")
                        .HasColumnType("int");

                    b.Property<float>("TotalCostTour")
                        .HasColumnType("real");

                    b.Property<string>("TourId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Vat")
                        .HasColumnType("real");

                    b.HasKey("IdTourDetail");

                    b.ToTable("TourDetails");
                });

            modelBuilder.Entity("Travel.Context.Models.Tourbooking", b =>
                {
                    b.Property<string>("IdTourbooking")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BookingNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("DateBooking")
                        .HasColumnType("bigint");

                    b.Property<float>("Deposit")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsCalled")
                        .HasColumnType("bit");

                    b.Property<long>("LastDate")
                        .HasColumnType("bigint");

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<string>("NameContact")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameCustomer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Pincode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<float>("RemainPrice")
                        .HasColumnType("real");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<double>("Vat")
                        .HasColumnType("float");

                    b.Property<string>("VoucherCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("IdTourbooking");

                    b.ToTable("Tourbookings");
                });

            modelBuilder.Entity("Travel.Context.Models.TourbookingDetails", b =>
                {
                    b.Property<string>("IdTourbookingDetails")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Adult")
                        .HasColumnType("int");

                    b.Property<int>("Baby")
                        .HasColumnType("int");

                    b.Property<long>("CallDate")
                        .HasColumnType("bigint");

                    b.Property<int>("Child")
                        .HasColumnType("int");

                    b.Property<bool>("IsCalled")
                        .HasColumnType("bit");

                    b.Property<string>("Pincode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TourBookingId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdTourbookingDetails");

                    b.ToTable("tourbookingDetails");
                });

            modelBuilder.Entity("Travel.Context.Models.Voucher", b =>
                {
                    b.Property<Guid>("IdVoucher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreateDate")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifyBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ModifyDate")
                        .HasColumnType("bigint");

                    b.Property<int>("Point")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("IdVoucher");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Travel.Context.Models.Ward", b =>
                {
                    b.Property<Guid>("IdWard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameWard")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdWard");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Travel.Context.Models.CostTour", b =>
                {
                    b.HasOne("Travel.Context.Models.Hotel", "Hotel")
                        .WithMany("CostTours")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel.Context.Models.Place", "Place")
                        .WithMany("CostTours")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel.Context.Models.Restaurant", "Restaurant")
                        .WithMany("CostTours")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel.Context.Models.TourDetail", "TourDetails")
                        .WithOne("CostTour")
                        .HasForeignKey("Travel.Context.Models.CostTour", "TourDetailId");

                    b.Navigation("Hotel");

                    b.Navigation("Place");

                    b.Navigation("Restaurant");

                    b.Navigation("TourDetails");
                });

            modelBuilder.Entity("Travel.Context.Models.District", b =>
                {
                    b.HasOne("Travel.Context.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Travel.Context.Models.Employee", b =>
                {
                    b.HasOne("Travel.Context.Models.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Travel.Context.Models.Payment", b =>
                {
                    b.HasOne("Travel.Context.Models.Tourbooking", "Tourbooking")
                        .WithMany("Payment")
                        .HasForeignKey("TourBookingId");

                    b.Navigation("Tourbooking");
                });

            modelBuilder.Entity("Travel.Context.Models.Promotion", b =>
                {
                    b.HasOne("Travel.Context.Models.Schedule", "Schedules")
                        .WithMany("Promotions")
                        .HasForeignKey("IdSchedule");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Travel.Context.Models.Schedule", b =>
                {
                    b.HasOne("Travel.Context.Models.Car", "Cars")
                        .WithMany("Schedules")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel.Context.Models.Employee", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Travel.Context.Models.Tour", "Tour")
                        .WithMany("Schedules")
                        .HasForeignKey("IdTour");

                    b.Navigation("Cars");

                    b.Navigation("Employee");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("Travel.Context.Models.Timeline", b =>
                {
                    b.HasOne("Travel.Context.Models.Schedule", "Schedule")
                        .WithMany("Timelines")
                        .HasForeignKey("IdSchedule");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Travel.Context.Models.TourbookingDetails", b =>
                {
                    b.HasOne("Travel.Context.Models.Tourbooking", "Tourbooking")
                        .WithOne("TourbookingDetails")
                        .HasForeignKey("Travel.Context.Models.TourbookingDetails", "IdTourbookingDetails")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tourbooking");
                });

            modelBuilder.Entity("Travel.Context.Models.Ward", b =>
                {
                    b.HasOne("Travel.Context.Models.District", "District")
                        .WithMany("Ward")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("Travel.Context.Models.Car", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Travel.Context.Models.District", b =>
                {
                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Travel.Context.Models.Employee", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Travel.Context.Models.Hotel", b =>
                {
                    b.Navigation("CostTours");
                });

            modelBuilder.Entity("Travel.Context.Models.Place", b =>
                {
                    b.Navigation("CostTours");
                });

            modelBuilder.Entity("Travel.Context.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Travel.Context.Models.Restaurant", b =>
                {
                    b.Navigation("CostTours");
                });

            modelBuilder.Entity("Travel.Context.Models.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Travel.Context.Models.Schedule", b =>
                {
                    b.Navigation("Promotions");

                    b.Navigation("Timelines");
                });

            modelBuilder.Entity("Travel.Context.Models.Tour", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Travel.Context.Models.TourDetail", b =>
                {
                    b.Navigation("CostTour");
                });

            modelBuilder.Entity("Travel.Context.Models.Tourbooking", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("TourbookingDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
